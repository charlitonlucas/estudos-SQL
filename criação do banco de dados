create database curso_sql;
use curso_sql;
create table funcionarios
(
    id int unsigned not null auto_increment,
    nome varchar(45) not null,
    salario double not null default '0',
    departamento varchar (45) not null,
    primary key(id)
);
create table veiculos
( 
id int unsigned not null auto_increment,
funcionario_id int unsigned default null,
veiculo varchar(45) not null default ' ',
placa varchar(10) not null default ' ',
primary key(id),
constraint fk_veiculos_funcionarios foreign key (funcionario_id) references funcionarios (id)
);
 create table salarios
 (
 faixa varchar(45) not null,
 inicio double not null,
 fim double not null,
 primary key(faixa)
 );
 alter table funcionarios change column nome nome_func varchar(45) not null;
 alter table funcionarios change column nome_func nome varchar(45) not null;
 
 drop table salarios;
create index departamentos on funcionarios(departamento);
create index nomes on funcionarios(nome(6));
insert into funcionarios(id, nome, salario,departamento)values(1,"lucas",1000,"ti");
select * from  funcionarios;
insert into funcionarios(id, nome, salario,departamento)values(2,"charliton",4000,"ti");
insert into funcionarios(nome, salario,departamento)values("charlinho",4000,"ti");
select * from funcionarios where salario > 1000;
select * from funcionarios where salario > 500;
select * from funcionarios ;
set sql_safe_updates=0;
/* para abilitar o safe_updates: set sql_safe_updates=1;*/
update funcionarios set salario= salario * 1.1;
update funcionarios set salario= salario *2 where salario < 2000;
/* o comando abaixo arredonda o resultado em duas casas após a vírgula*/
update funcionarios set salario= round(salario * 3,2);
/* apagar registro específico*/
delete from funcionarios where id=3;
insert into veiculos (funcionario_id,veiculo,placa) values(1,'gol','ppppppp');
insert into veiculos (funcionario_id,veiculo,placa) values(1,'ford','dddddddd');
select * from veiculos;
select * from funcionarios;
insert into funcionarios (nome,salario,departamento)values('amanda',4000,'saude');
update veiculos set funcionario_id = 4 where id=2;
insert into salarios (faixa,inicio,fim) values ('programador',2000,5000);
insert into salarios (faixa, inicio, fim) values( 'medica', 4000,10000);
select * from salarios;
select faixa,inicio from salarios;

select* from funcionarios;

/*comando para unir buscas*/
select* from funcionarios where id=1
union
select* from funcionarios where nome='amanda';

/*continuação dos estudos*/
create database curso_sql;
use curso_sql;
create table funcionarios
(
    id int unsigned not null auto_increment,
    nome varchar(45) not null,
    salario double not null default '0',
    departamento varchar (45) not null,
    primary key(id)
);
create table veiculos
( 
id int unsigned not null auto_increment,
funcionario_id int unsigned default null,
veiculo varchar(45) not null default ' ',
placa varchar(10) not null default ' ',
primary key(id),
constraint fk_veiculos_funcionarios foreign key (funcionario_id) references funcionarios (id)
);
 create table salarios
 (
 faixa varchar(45) not null,
 inicio double not null,
 fim double not null,
 primary key(faixa)
 );
 alter table funcionarios change column nome nome_func varchar(45) not null;
 alter table funcionarios change column nome_func nome varchar(45) not null;
 
 drop table salarios;
create index departamentos on funcionarios(departamento);
create index nomes on funcionarios(nome(6));
insert into funcionarios(id, nome, salario,departamento)values(1,"lucas",1000,"ti");
select * from  funcionarios;
insert into funcionarios(id, nome, salario,departamento)values(2,"charliton",4000,"ti");
insert into funcionarios(nome, salario,departamento)values("charlinho",4000,"ti");
select * from funcionarios where salario > 1000;
select * from funcionarios where salario > 500;
select * from funcionarios ;
set sql_safe_updates=0;
/* para abilitar o safe_updates: set sql_safe_updates=1;*/
update funcionarios set salario= salario * 1.1;
update funcionarios set salario= salario *2 where salario < 2000;
/* o comando abaixo arredonda o resultado em duas casas após a vírgula*/
update funcionarios set salario= round(salario * 3,2);
/* apagar registro específico*/
delete from funcionarios where id=3;
insert into veiculos (funcionario_id,veiculo,placa) values(1,'gol','ppppppp');
insert into veiculos (funcionario_id,veiculo,placa) values(1,'ford','dddddddd');
select * from veiculos;
select * from funcionarios;
insert into funcionarios (nome,salario,departamento)values('amanda',4000,'saude');
update veiculos set funcionario_id = 4 where id=2;
insert into salarios (faixa,inicio,fim) values ('programador',2000,5000);
insert into salarios (faixa, inicio, fim) values( 'medica', 4000,10000);
select * from salarios;
select faixa,inicio from salarios;

select* from funcionarios;

/*comando para unir buscas*/
select* from funcionarios where id=1
union
select* from funcionarios where nome='amanda';

/*contagem de registros no banco*/
select count(*) from funcionarios;
select * from funcionarios;

/*contagem de salarios acima de 10000*/
select count(*) from funcionarios where salario>=10000;
select count(*) from funcionarios where salario>1000 and departamento= 'ti';
select sum(salario) from funcionarios;
select max(salario) from funcionarios;
select min(salario) from funcionarios;
select avg(salario) from funcionarios where departamento='ti';
select min(salario) from funcionarios where departamento='ti';
select min(salario)from funcionarios;
select distinct(departamento) from funcionarios;
select*from funcionarios order by salario;
select*from funcionarios order by nome;
select* from funcionarios order by salario desc;
select * from funcionarios limit 2;
select * from funcionarios limit 2 offset 1;
select * from funcionarios limit 1,2;
select avg(salario)from funcionarios;
select avg(salario) from funcionarios where departamento='ti';	
select departamento, avg(salario) from funcionarios group by departamento;
select departamento, avg(salario) from funcionarios group by departamento having avg(salario)>10000;
select departamento,avg (salario) from funcionarios group by departamento having avg(salario)<5000;
select departamento, count(*) from funcionarios group by departamento;

/* subqueries */
select nome from funcionarios 
where departamento in(
select departamento from funcionarios group by departamento having avg(salario)>10000
);

SELECT * FROM funcionarios ORDER BY salario DESC LIMIT 1;
SELECT COUNT(salario) FROM funcionarios WHERE departamento = 'saude';
SELECT MAX(salario) FROM funcionarios WHERE departamento != 'ti';
SELECT COUNT(*) FROM funcionarios WHERE departamento != 'saude';

SELECT * FROM funcionarios WHERE departamento IN
  (SELECT departamento FROM funcionarios GROUP BY departamento HAVING SUM(salario) <5000);
  
/* CRIAÇÃO DE USUÁRIO */
/*usuário só pode acessar o servidor a partir de um IP específico*/
/*create user'lucas'@'200.000.000.000' identified by'ch250491';*/
/*usuário só pode acessar o servidor a partir do próprio servidor*/
create user 'charliton'@'localhost' identified by 'ch12345';
/*usuário pode conectar o servidor em qualquer local*/
/*create user'charliton'@'%' identified by'ch250491'*/
grant all on curso_sql.* to 'charliton'@'localhost';

create user 'charliton'@'%' identified by'charlitonviagem';
grant select on curso_sql.* to 'charliton'@'%';
grant insert on curso_sql.funcionarios to 'charliton'@'%';

/*removendo acessos dados*/
revoke insert on curso_sql.funcionarios from 'charliton'@'%';
drop user 'charliton'@'%';
drop user 'charliton' @'localhost';
select user from mysql.user;
show grants for 'charliton'@'localhost';

/*transações sql*/
/*conferir mecanismos que suportam transações:*/
show engines;	
create table contas_bancarias
(
 id int unsigned not null auto_increment,
 titular varchar(45) not null,
 saldo double not null,
 primary key(id) 
) engine=InnoDB;

insert into contas_bancarias (titular, saldo) values ('charlinho', 10000);
insert into contas_bancarias (titular, saldo) values ('Amanda', 20000);

select* from contas_bancarias;
start transaction;
update contas_bancarias set saldo= saldo-1000 where id= 1;
update contas_bancarias set saldo= saldo+1000 where id= 2;
rollback;
commit;

/*aula sobre triggers*/
create table pedidos
(
id int unsigned not null auto_increment,
descricao varchar(100) not null,
valor double not null default'0',
pago varchar(3) not null default'não',
primary key(id)
);
create table pedidos2
(
id int unsigned not null auto_increment,
descricao varchar(100) not null,
valor double not null default'0',
pago varchar(3) not null default'não',
primary key(id)
);
insert into pedidos2 (descricao,valor) values ('notebook intel', 3000);
insert into pedidos2 (descricao,valor) values ('notebook lenovo', 2000);
insert into pedidos2 (descricao,valor) values ('notebook dell', 5000);
select * from pedidos2;
call limpa_pedidos();
